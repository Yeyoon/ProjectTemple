///////////////////////////////////////////////////////////////
// Filename:	Light.vs
// Author:		Daniel Cossu
// Company:		Ripe Tomato Studios
///////////////////////////////////////////////////////////////

//Globals
Texture2D shaderTextures[4]; // 0 = Diff, 1 = Bump, 2 = spec, 3 = alpha
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};

//Typedefs
struct PixelInputType
{
	float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float2 tex : TEXCOORD0;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 texColor;
	float4 bumpMap;
	float3 bumpNormal;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float4 specularIntensity;
	float3 reflection;
	float4 specular;

	texColor = shaderTextures[0].Sample(SampleType, input.tex);

	bumpMap = (shaderTextures[1].Sample(SampleType, input.tex) * 2.0f) - 1.0f;
	bumpNormal = input.normal + (bumpMap.x * input.tangent + bumpMap.y * input.binormal);
	bumpNormal = normalize(bumpNormal);

	//color = ambientColor;

	lightDir = -lightDirection;

	lightIntensity = saturate(dot(bumpNormal, lightDir));

	color = saturate(ambientColor + diffuseColor * lightIntensity);

	color = color * texColor;

	if(lightIntensity > 0.0f)
	{
		specularIntensity = shaderTextures[2].Sample(SampleType, input.tex);

		reflection = normalize(2 * lightIntensity * bumpNormal - lightDir);

		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);

		specular = specular * specularIntensity;

		color = saturate(color + specular);
	}

	color.a = shaderTextures[3].Sample(SampleType, input.tex);

	return color;
};